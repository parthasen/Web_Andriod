#pip install Flask #ALREADY DONE
#source activate PyAlgo

from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()


###FORMAT
@app . route ( ’/ albums / < int : album_id > ’
’/ photos / < int : photo_id >/ ’
’ < string ( length =4): action > ’)
def photo_action ( album_id , photo_id , action ):

@app . route ( ’/ foo ’ ,
methods =[ ’ GET ’ , ’ POST ’ , ’ PUT ’ ])
def foo ():
if request . method == ’ GET ’:
return get_foo ()
elif request . method == ’ POST ’:
return create_foo ()
else :
retturn update_foo ()

@app . route ( ’/ foo ’ ,
methods =[ ’ GET ’ , ’ POST ’ , ’ PUT ’ ])
def foo ():
if request . method == ’ GET ’:
return get_foo ()
elif request . method == ’ POST ’:
return create_foo ()
else :
retturn update_foo ()
# Class view of manual dispatch
class Foo ( View ):
def dispatch_request ( self ):
if request . method == ’ GET ’:
return self . get ()
elif request . method == ’ POST ’:
return self . create ()
elif request . method == ’ PUT ’:
return self . update ()
app . add_url_rule (
’/ foo ’ , view_func = Foo . as_view ( ’ foo ’ ))
#Class views with HTTP method-based dispatch
class Foo ( MethodView ):
def get ( self ):
...
def post ( self ):
...
def put ( self ):
...
app . add_url_rule (
’/ foo ’ , view_func = Foo . as_view ( ’ foo ’ ))








https://ep2013.europython.eu/media/conference/slides/how-python-is-used-at-hyves.pdf
